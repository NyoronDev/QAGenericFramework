@model Presentation.PerformanceWeb.Models.PerformanceViewModel
@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.PerformanceActionsViewModel.ActionViewModelList.First().ChartPointReportViewModelList.Select(x => x.DimensionOne).ToList());
    var XLabelsTime = Newtonsoft.Json.JsonConvert.SerializeObject(Model.PerformanceActionsViewModel.ChartPointTimeViewModelList.Select(x => x.DimensionOne).ToList());
    var colours = new List<string> { "blue", "yellow", "red", "green", "black", "brown", "azure", "ivory", "teal", "silver", "purple", "navy", "pink", "gray", "orange", "maroon", "aquamarine", "coral", "fuchsia", "wheat", "lime", "crimson", "khaki", "magenta", "olden", "plum", "olive", "cyan" };
    var countColours = 0;
    ViewData["Title"] = "Performance Charts";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Perfromance Charts</title>
</head>
<body>
    <div class="box-body">
        @*Performance date time*@
        <div>
            <h2>Started / Finished Date</h2>
            <div><b>Started Date: </b>@Model.PerformanceActionsViewModel.StartedDate</div>
            <div><b>Finished Date: </b>@Model.PerformanceActionsViewModel.FinishedDate</div>
            <br />
        </div>

        @*Performance table container*@
        <div><h2>Performance table for @Model.Title</h2><br /></div>
        <table align="center" class="table table-bordered table-hover">
            <tr>
                <th>Requests</th>
                <th>Users</th>
                <th>Average with errors</th>
                <th>Average without errors</th>
                <th>Requests per second</th>
                <th>Maximum</th>
                <th>Minimum with errors</th>
                <th>Minimum without errors</th>
                <th>Total Time</th>
                <th>Errors</th>
                <th>Errors (%)</th>
            </tr>
            @foreach (var value in Model.PerformanceActionsViewModel.ActionViewModelList)
            {
                <tr>
                    <td>@value.TotalRequests</td>
                    <td>@value.TotalUsers</td>
                    <td>@Math.Round(value.ActionsAverage, 2) seconds</td>
                    <td>@Math.Round(value.ActionsAverageWithoutErrors, 2) seconds</td>
                    <td>@Math.Round(value.RequestPerSecond, 2) requests for 1 second</td>
                    <td>@Math.Round(value.Maximum, 2) seconds</td>
                    <td>@Math.Round(value.Minimum, 2) seconds</td>
                    <td>@Math.Round(value.MinimumWithoutErrors, 2) seconds</td>
                    <td>@Math.Round(value.ExecutionTime, 2) minutes</td>
                    <td>@value.TotalActionsWithErrors</td>
                    <td>@value.PercentageOfErrors %</td>
                </tr>
            }
        </table>

        @*Performance chart container*@
        <br /><br />
        <div><h2>Performance chart for @Model.Title</h2><br /></div>
        <div class="chart-container">
            <canvas id="chart" style="width:100%; height:500px"></canvas>
        </div>

        @*Performance chart container*@
        <br /><br />
        <div><h2>Performance time chart</h2><br /></div>
        <div class="chart-container">
            <canvas id="chart-time" style="width:100%; height:500px"></canvas>
        </div>

        @*Performance sub actions*@
        <br /><br />
        <div><h2>Sub-actions average</h2></div>
        @foreach (var value in Model.PerformanceActionsViewModel.ActionViewModelList)
        {
            <div><h3>@value.Title</h3><br /></div>
            <table align="center" class="table table-bordered table-hover">
                <tr>
                    <th>Sub action</th>
                    <th>Average</th>
                </tr>
                @foreach (var subaction in value.SubActionsTimeDictionary)
                {
                    <tr>
                        <td>@subaction.Key</td>
                        <td>@subaction.Value seconds</td>
                    </tr>
                }
            </table>
            <br />
        }

        @*Errors table container*@
        @foreach (var value in Model.PerformanceActionsViewModel.ActionViewModelList)
        {
            if (value.AnyErrors)
            {
                <br />
                <div><h2>Errors for @value.Title</h2><br /></div>
                <table align="center" class="table table-bordered table-hover">
                    <tr>
                        <th>Sub action</th>
                        <th>Error Message</th>
                        <th>Count</th>
                    </tr>
                    @foreach (var subAction in value.SubActionsErrorViewModelList.GroupBy(m => new { m.SubAction, m.ErrorMessage }))
                    {
                        <tr>
                            <td>@subAction.Key.SubAction</td>
                            <td>@subAction.Key.ErrorMessage</td>
                            <td>@subAction.Count()</td>
                        </tr>
                    }
                </table>
            }
        }
    </div>
</body>
</html>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

<script type="text/javascript">

$(function () {
    var chartName = "chart";
    var ctx = document.getElementById(chartName).getContext('2d');
    var data = {
        labels: @Html.Raw(XLabels),
        datasets: [
            @foreach (var value in Model.PerformanceActionsViewModel.ActionViewModelList)
            {
                <text>{
                label: '@value.Title',
                fill: false,
                lineTension: 0.1,
                backgroundColor: '@colours[countColours]',
                borderColor: '@colours[countColours]', // The main line color
                borderCapStyle: 'square',
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: "black",
                pointBackgroundColor: '@colours[countColours]',
                pointBorderWidth: 1,
                pointHoverRadius: 8,
                pointHoverBackgroundColor: "yellow",
                pointHoverBorderColor: "brown",
                pointHoverBorderWidth: 2,
                pointRadius: 4,
                pointHitRadius: 10,
                borderWidth: 1,
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(value.ChartPointReportViewModelList.Select(x => x.Quantity).ToList()))
                },</text>

                countColours++;
            }
        ]
    };

    var options = {
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    min: 0,
                    beginAtZero: true
                },
                gridLines: {
                    display: false
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Seconds for each request',
                    fontSize: 20
                }
            }],
            xAxes: [{
                ticks: {
                    display: false
                },
                scaleLabel: {
                    display: true,
                    labelString: '@Model.PerformanceActionsViewModel.ActionViewModelList.First().TotalRequests requests',
                    fontSize: 20
                }
            }]
        }
    };

    var myChart = new  Chart(ctx, {
            options: options,
            data: data,
            type:'line'
    });
});

$(function () {
    var chartName = "chart-time";
    var ctx = document.getElementById(chartName).getContext('2d');
    var data = {
        labels: @Html.Raw(XLabelsTime),
        datasets: [
            {
                label: 'Amount of requests',
                fill: false,
                lineTension: 0.1,
                backgroundColor: 'green',
                borderColor: 'green', // The main line color
                borderCapStyle: 'square',
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: "black",
                pointBackgroundColor: 'green',
                pointBorderWidth: 1,
                pointHoverRadius: 8,
                pointHoverBackgroundColor: "yellow",
                pointHoverBorderColor: "brown",
                pointHoverBorderWidth: 2,
                pointRadius: 4,
                pointHitRadius: 10,
                borderWidth: 1,
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PerformanceActionsViewModel.ChartPointTimeViewModelList.Select(x => x.Quantity).ToList()))
            },
            {
                label: 'Amount of errors',
                fill: false,
                lineTension: 0.1,
                backgroundColor: 'red',
                borderColor: 'red', // The main line color
                borderCapStyle: 'square',
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: "black",
                pointBackgroundColor: 'red',
                pointBorderWidth: 1,
                pointHoverRadius: 8,
                pointHoverBackgroundColor: "yellow",
                pointHoverBorderColor: "brown",
                pointHoverBorderWidth: 2,
                pointRadius: 4,
                pointHitRadius: 10,
                borderWidth: 1,
                data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PerformanceActionsViewModel.ChartPointTimeViewModelList.Select(x => x.ErrorQuantity).ToList()))
            }
        ]
    };

    var options = {
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    min: 0,
                    beginAtZero: true
                },
                gridLines: {
                    display: false
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Amount of requests',
                    fontSize: 20
                }
            }],
            xAxes: [{
                ticks: {
                    display: true
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Minutes (For each 30 seconds)',
                    fontSize: 20
                }
            }]
        }
    };

    var myChart = new  Chart(ctx, {
            options: options,
            data: data,
            type:'line'
    });
});
</script>